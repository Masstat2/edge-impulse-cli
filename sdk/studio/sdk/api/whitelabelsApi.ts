/**
 * Edge Impulse API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// tslint:disable-next-line: variable-name, no-var-requires
const PATH = require('path');
// tslint:disable-next-line: no-unsafe-any
module.paths.push(PATH.join(process.cwd(), 'node_modules'));

import localVarRequest = require('request');
import http = require('http');

/* tslint:disable:no-unused-locals */
<<<<<<< HEAD:sdk/studio/sdk/api/whitelabelsApi.ts
import { CreateWhitelabelRequest } from '../model/createWhitelabelRequest';
import { CreateWhitelabelResponse } from '../model/createWhitelabelResponse';
import { GenericApiResponse } from '../model/genericApiResponse';
import { GetAllWhitelabelsResponse } from '../model/getAllWhitelabelsResponse';
import { GetImpulseBlocksResponse } from '../model/getImpulseBlocksResponse';
import { GetWhitelabelDomainResponse } from '../model/getWhitelabelDomainResponse';
import { GetWhitelabelResponse } from '../model/getWhitelabelResponse';
import { UpdateWhitelabelDeploymentTargetsRequest } from '../model/updateWhitelabelDeploymentTargetsRequest';
=======
import { EvaluateJobResponse } from '../model/evaluateJobResponse';
import { GetDeploymentResponse } from '../model/getDeploymentResponse';
import { KerasModelTypeEnum } from '../model/kerasModelTypeEnum';
>>>>>>> parent of 840c0ea (Release v1.13.10):sdk/studio/api/deploymentApi.ts

import { ObjectSerializer, Authentication, VoidAuth } from '../model/models';
import { HttpBasicAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://studio.edgeimpulse.com/v1';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum WhitelabelsApiApiKeys {
    ApiKeyAuthentication,
    JWTAuthentication,
}


export type WhitelabelsApiOpts = {
    extraHeaders?: {
        [name: string]: string
    },
};

export class WhitelabelsApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;
    protected _opts : WhitelabelsApiOpts = { };

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'ApiKeyAuthentication': new ApiKeyAuth('header', 'x-api-key'),
        'JWTAuthentication': new ApiKeyAuth('cookie', 'jwt'),
    }

    constructor(basePath?: string, opts?: WhitelabelsApiOpts);
    constructor(basePathOrUsername: string, opts?: WhitelabelsApiOpts, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }

        this.opts = opts ?? { };
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    set opts(opts: WhitelabelsApiOpts) {
        this._opts = opts;
    }

    get opts() {
        return this._opts;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: WhitelabelsApiApiKeys, value: string | undefined) {
        (this.authentications as any)[WhitelabelsApiApiKeys[key]].apiKey = value;
    }


    /**
     * Create a new white label
     * @summary Create a new white label
     * @param createWhitelabelRequest 
     */
    public async createWhitelabel (createWhitelabelRequest: CreateWhitelabelRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<CreateWhitelabelResponse> {
        const localVarPath = this.basePath + '/api/whitelabels';
        let localVarQueryParameters: any = {};
<<<<<<< HEAD:sdk/studio/sdk/api/whitelabelsApi.ts
        let localVarHeaderParams: any = (<any>Object).assign({
            'User-Agent': 'edgeimpulse-api nodejs'
        }, this.defaultHeaders);
        const produces = ['application/json'];
=======
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        const produces = ['application/zip'];
>>>>>>> parent of 840c0ea (Release v1.13.10):sdk/studio/api/deploymentApi.ts
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

<<<<<<< HEAD:sdk/studio/sdk/api/whitelabelsApi.ts
        // verify required parameter 'createWhitelabelRequest' is not null or undefined


        if (createWhitelabelRequest === null || createWhitelabelRequest === undefined) {
            throw new Error('Required parameter createWhitelabelRequest was null or undefined when calling createWhitelabel.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);
        (<any>Object).assign(localVarHeaderParams, this.opts.extraHeaders);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            agentOptions: {keepAlive: false},
            json: true,
            body: ObjectSerializer.serialize(createWhitelabelRequest, "CreateWhitelabelRequest")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.ApiKeyAuthentication.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.JWTAuthentication.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.JWTHttpHeaderAuthentication.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<CreateWhitelabelResponse>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "CreateWhitelabelResponse");

                        const errString = `Failed to call "${localVarPath}", returned ${response.statusCode}: ` + response.body;

                        if (typeof body.success === 'boolean' && !body.success) {
                            reject(new Error(body.error || errString));
                        }
                        else if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve(body);
                        }
                        else {
                            reject(errString);
                        }
                    }
                });
            });
        });
    }

    /**
     * Deletes the white label with the given id.
     * @summary Deletes a white label
     * @param whitelabelIdentifier Whitelabel ID
     */
    public async deleteWhitelabel (whitelabelIdentifier: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<GenericApiResponse> {
        const localVarPath = this.basePath + '/api/whitelabel/{whitelabelIdentifier}'
            .replace('{' + 'whitelabelIdentifier' + '}', encodeURIComponent(String(whitelabelIdentifier)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({
            'User-Agent': 'edgeimpulse-api nodejs'
        }, this.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'whitelabelIdentifier' is not null or undefined


        if (whitelabelIdentifier === null || whitelabelIdentifier === undefined) {
            throw new Error('Required parameter whitelabelIdentifier was null or undefined when calling deleteWhitelabel.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);
        (<any>Object).assign(localVarHeaderParams, this.opts.extraHeaders);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            agentOptions: {keepAlive: false},
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.ApiKeyAuthentication.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.JWTAuthentication.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.JWTHttpHeaderAuthentication.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<GenericApiResponse>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "GenericApiResponse");

                        const errString = `Failed to call "${localVarPath}", returned ${response.statusCode}: ` + response.body;

                        if (typeof body.success === 'boolean' && !body.success) {
                            reject(new Error(body.error || errString));
                        }
                        else if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve(body);
                        }
                        else {
                            reject(errString);
                        }
                    }
                });
            });
        });
    }

    /**
     * Lists all possible DSP and ML blocks available for this white label.
     * @summary Get impulse blocks
     * @param whitelabelIdentifier Whitelabel ID
     */
    public async getAllImpulseBlocks (whitelabelIdentifier: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<GetImpulseBlocksResponse> {
        const localVarPath = this.basePath + '/api/whitelabel/{whitelabelIdentifier}/impulse/blocks'
            .replace('{' + 'whitelabelIdentifier' + '}', encodeURIComponent(String(whitelabelIdentifier)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({
            'User-Agent': 'edgeimpulse-api nodejs'
        }, this.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'whitelabelIdentifier' is not null or undefined


        if (whitelabelIdentifier === null || whitelabelIdentifier === undefined) {
            throw new Error('Required parameter whitelabelIdentifier was null or undefined when calling getAllImpulseBlocks.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);
        (<any>Object).assign(localVarHeaderParams, this.opts.extraHeaders);
=======
        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling downloadBuild.');
        }

        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling downloadBuild.');
        }

        if (type !== undefined) {
            localVarQueryParameters['type'] = ObjectSerializer.serialize(type, "string");
        }

        if (modelType !== undefined) {
            localVarQueryParameters['modelType'] = ObjectSerializer.serialize(modelType, "KerasModelTypeEnum");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);
>>>>>>> parent of 840c0ea (Release v1.13.10):sdk/studio/api/deploymentApi.ts

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
<<<<<<< HEAD:sdk/studio/sdk/api/whitelabelsApi.ts
            agentOptions: {keepAlive: false},
            json: true,
=======
            encoding: null,
>>>>>>> parent of 840c0ea (Release v1.13.10):sdk/studio/api/deploymentApi.ts
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.ApiKeyAuthentication.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.JWTAuthentication.applyToRequest(localVarRequestOptions));

<<<<<<< HEAD:sdk/studio/sdk/api/whitelabelsApi.ts
        authenticationPromise = authenticationPromise.then(() => this.authentications.JWTHttpHeaderAuthentication.applyToRequest(localVarRequestOptions));

=======
>>>>>>> parent of 840c0ea (Release v1.13.10):sdk/studio/api/deploymentApi.ts
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
<<<<<<< HEAD:sdk/studio/sdk/api/whitelabelsApi.ts
            return new Promise<GetImpulseBlocksResponse>((resolve, reject) => {
=======
            return new Promise<{ response: http.IncomingMessage; body: Buffer;  }>((resolve, reject) => {
>>>>>>> parent of 840c0ea (Release v1.13.10):sdk/studio/api/deploymentApi.ts
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
<<<<<<< HEAD:sdk/studio/sdk/api/whitelabelsApi.ts
                        body = ObjectSerializer.deserialize(body, "GetImpulseBlocksResponse");

                        const errString = `Failed to call "${localVarPath}", returned ${response.statusCode}: ` + response.body;

                        if (typeof body.success === 'boolean' && !body.success) {
                            reject(new Error(body.error || errString));
                        }
                        else if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve(body);
                        }
                        else {
                            reject(errString);
=======
                        body = ObjectSerializer.deserialize(body, "Buffer");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
>>>>>>> parent of 840c0ea (Release v1.13.10):sdk/studio/api/deploymentApi.ts
                        }
                    }
                });
            });
        });
    }
<<<<<<< HEAD:sdk/studio/sdk/api/whitelabelsApi.ts

    /**
     * Retrieve the list of registered white labels.
     * @summary List the registered white labels
     */
    public async getAllWhitelabels (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<GetAllWhitelabelsResponse> {
        const localVarPath = this.basePath + '/api/whitelabels';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({
            'User-Agent': 'edgeimpulse-api nodejs'
        }, this.defaultHeaders);
=======
    /**
     * Gives information on whether a deployment was already built for a type
     * @summary Get deployment info
     * @param projectId Project ID
     * @param type Output format
     * @param modelType Optional model type of the build (if not, it uses the settings in the Keras block)
     */
    public async getDeployment (projectId: number, type: string, modelType?: KerasModelTypeEnum, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: GetDeploymentResponse;  }> {
        const localVarPath = this.basePath + '/api/{projectId}/deployment'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
>>>>>>> parent of 840c0ea (Release v1.13.10):sdk/studio/api/deploymentApi.ts
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

<<<<<<< HEAD:sdk/studio/sdk/api/whitelabelsApi.ts
        (<any>Object).assign(localVarHeaderParams, options.headers);
        (<any>Object).assign(localVarHeaderParams, this.opts.extraHeaders);
=======
        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling getDeployment.');
        }

        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling getDeployment.');
        }

        if (type !== undefined) {
            localVarQueryParameters['type'] = ObjectSerializer.serialize(type, "string");
        }

        if (modelType !== undefined) {
            localVarQueryParameters['modelType'] = ObjectSerializer.serialize(modelType, "KerasModelTypeEnum");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);
>>>>>>> parent of 840c0ea (Release v1.13.10):sdk/studio/api/deploymentApi.ts

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
<<<<<<< HEAD:sdk/studio/sdk/api/whitelabelsApi.ts
            agentOptions: {keepAlive: false},
=======
>>>>>>> parent of 840c0ea (Release v1.13.10):sdk/studio/api/deploymentApi.ts
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.ApiKeyAuthentication.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.JWTAuthentication.applyToRequest(localVarRequestOptions));

<<<<<<< HEAD:sdk/studio/sdk/api/whitelabelsApi.ts
        authenticationPromise = authenticationPromise.then(() => this.authentications.JWTHttpHeaderAuthentication.applyToRequest(localVarRequestOptions));

=======
>>>>>>> parent of 840c0ea (Release v1.13.10):sdk/studio/api/deploymentApi.ts
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
<<<<<<< HEAD:sdk/studio/sdk/api/whitelabelsApi.ts
            return new Promise<GetAllWhitelabelsResponse>((resolve, reject) => {
=======
            return new Promise<{ response: http.IncomingMessage; body: GetDeploymentResponse;  }>((resolve, reject) => {
>>>>>>> parent of 840c0ea (Release v1.13.10):sdk/studio/api/deploymentApi.ts
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
<<<<<<< HEAD:sdk/studio/sdk/api/whitelabelsApi.ts
                        body = ObjectSerializer.deserialize(body, "GetAllWhitelabelsResponse");

                        const errString = `Failed to call "${localVarPath}", returned ${response.statusCode}: ` + response.body;

                        if (typeof body.success === 'boolean' && !body.success) {
                            reject(new Error(body.error || errString));
                        }
                        else if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve(body);
                        }
                        else {
                            reject(errString);
=======
                        body = ObjectSerializer.deserialize(body, "GetDeploymentResponse");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
>>>>>>> parent of 840c0ea (Release v1.13.10):sdk/studio/api/deploymentApi.ts
                        }
                    }
                });
            });
        });
    }
<<<<<<< HEAD:sdk/studio/sdk/api/whitelabelsApi.ts

    /**
     * Retrieve all the information about this white label.
     * @summary White label information
     * @param whitelabelIdentifier Whitelabel ID
     */
    public async getWhitelabel (whitelabelIdentifier: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<GetWhitelabelResponse> {
        const localVarPath = this.basePath + '/api/whitelabel/{whitelabelIdentifier}'
            .replace('{' + 'whitelabelIdentifier' + '}', encodeURIComponent(String(whitelabelIdentifier)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({
            'User-Agent': 'edgeimpulse-api nodejs'
        }, this.defaultHeaders);
=======
    /**
     * Get evaluate job result, containing detailed performance statistics for every possible variant of the impulse.
     * @summary Evaluate job result
     * @param projectId Project ID
     */
    public async getEvaluateJobResult (projectId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EvaluateJobResponse;  }> {
        const localVarPath = this.basePath + '/api/{projectId}/deployment/evaluate'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
>>>>>>> parent of 840c0ea (Release v1.13.10):sdk/studio/api/deploymentApi.ts
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

<<<<<<< HEAD:sdk/studio/sdk/api/whitelabelsApi.ts
        // verify required parameter 'whitelabelIdentifier' is not null or undefined


        if (whitelabelIdentifier === null || whitelabelIdentifier === undefined) {
            throw new Error('Required parameter whitelabelIdentifier was null or undefined when calling getWhitelabel.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);
        (<any>Object).assign(localVarHeaderParams, this.opts.extraHeaders);
=======
        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling getEvaluateJobResult.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);
>>>>>>> parent of 840c0ea (Release v1.13.10):sdk/studio/api/deploymentApi.ts

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
<<<<<<< HEAD:sdk/studio/sdk/api/whitelabelsApi.ts
            agentOptions: {keepAlive: false},
=======
>>>>>>> parent of 840c0ea (Release v1.13.10):sdk/studio/api/deploymentApi.ts
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.ApiKeyAuthentication.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.JWTAuthentication.applyToRequest(localVarRequestOptions));

<<<<<<< HEAD:sdk/studio/sdk/api/whitelabelsApi.ts
        authenticationPromise = authenticationPromise.then(() => this.authentications.JWTHttpHeaderAuthentication.applyToRequest(localVarRequestOptions));

=======
>>>>>>> parent of 840c0ea (Release v1.13.10):sdk/studio/api/deploymentApi.ts
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
<<<<<<< HEAD:sdk/studio/sdk/api/whitelabelsApi.ts
            return new Promise<GetWhitelabelResponse>((resolve, reject) => {
=======
            return new Promise<{ response: http.IncomingMessage; body: EvaluateJobResponse;  }>((resolve, reject) => {
>>>>>>> parent of 840c0ea (Release v1.13.10):sdk/studio/api/deploymentApi.ts
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
<<<<<<< HEAD:sdk/studio/sdk/api/whitelabelsApi.ts
                        body = ObjectSerializer.deserialize(body, "GetWhitelabelResponse");

                        const errString = `Failed to call "${localVarPath}", returned ${response.statusCode}: ` + response.body;

                        if (typeof body.success === 'boolean' && !body.success) {
                            reject(new Error(body.error || errString));
                        }
                        else if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve(body);
                        }
                        else {
                            reject(errString);
=======
                        body = ObjectSerializer.deserialize(body, "EvaluateJobResponse");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
>>>>>>> parent of 840c0ea (Release v1.13.10):sdk/studio/api/deploymentApi.ts
                        }
                    }
                });
            });
        });
    }
<<<<<<< HEAD:sdk/studio/sdk/api/whitelabelsApi.ts

    /**
     * Get a white label domain given its unique identifier.
     * @summary Get white label domain
     * @param whitelabelIdentifier Whitelabel ID
     */
    public async getWhitelabelDomain (whitelabelIdentifier: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<GetWhitelabelDomainResponse> {
        const localVarPath = this.basePath + '/api/whitelabel/{whitelabelIdentifier}/domain'
            .replace('{' + 'whitelabelIdentifier' + '}', encodeURIComponent(String(whitelabelIdentifier)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({
            'User-Agent': 'edgeimpulse-api nodejs'
        }, this.defaultHeaders);
=======
    /**
     * Get evaluate job result, containing detailed performance statistics for every possible variant of the impulse. This only checks cache, and throws an error if there is no data in cache.
     * @summary Check evaluate job result (cache)
     * @param projectId Project ID
     */
    public async getEvaluateJobResultCache (projectId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EvaluateJobResponse;  }> {
        const localVarPath = this.basePath + '/api/{projectId}/deployment/evaluate/cache'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
>>>>>>> parent of 840c0ea (Release v1.13.10):sdk/studio/api/deploymentApi.ts
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

<<<<<<< HEAD:sdk/studio/sdk/api/whitelabelsApi.ts
        // verify required parameter 'whitelabelIdentifier' is not null or undefined


        if (whitelabelIdentifier === null || whitelabelIdentifier === undefined) {
            throw new Error('Required parameter whitelabelIdentifier was null or undefined when calling getWhitelabelDomain.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);
        (<any>Object).assign(localVarHeaderParams, this.opts.extraHeaders);
=======
        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling getEvaluateJobResultCache.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);
>>>>>>> parent of 840c0ea (Release v1.13.10):sdk/studio/api/deploymentApi.ts

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
<<<<<<< HEAD:sdk/studio/sdk/api/whitelabelsApi.ts
            agentOptions: {keepAlive: false},
=======
>>>>>>> parent of 840c0ea (Release v1.13.10):sdk/studio/api/deploymentApi.ts
            json: true,
        };

        let authenticationPromise = Promise.resolve();
<<<<<<< HEAD:sdk/studio/sdk/api/whitelabelsApi.ts
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<GetWhitelabelDomainResponse>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "GetWhitelabelDomainResponse");

                        const errString = `Failed to call "${localVarPath}", returned ${response.statusCode}: ` + response.body;

                        if (typeof body.success === 'boolean' && !body.success) {
                            reject(new Error(body.error || errString));
                        }
                        else if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve(body);
                        }
                        else {
                            reject(errString);
                        }
                    }
                });
            });
        });
    }

    /**
     * Update some or all of the deployment targets enabled for this white label.
     * @summary Update deployment targets
     * @param whitelabelIdentifier Whitelabel ID
     * @param updateWhitelabelDeploymentTargetsRequest 
     */
    public async updateDeploymentTargets (whitelabelIdentifier: number, updateWhitelabelDeploymentTargetsRequest: UpdateWhitelabelDeploymentTargetsRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<GenericApiResponse> {
        const localVarPath = this.basePath + '/api/whitelabel/{whitelabelIdentifier}/deploymentTargets'
            .replace('{' + 'whitelabelIdentifier' + '}', encodeURIComponent(String(whitelabelIdentifier)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({
            'User-Agent': 'edgeimpulse-api nodejs'
        }, this.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'whitelabelIdentifier' is not null or undefined


        if (whitelabelIdentifier === null || whitelabelIdentifier === undefined) {
            throw new Error('Required parameter whitelabelIdentifier was null or undefined when calling updateDeploymentTargets.');
        }

        // verify required parameter 'updateWhitelabelDeploymentTargetsRequest' is not null or undefined


        if (updateWhitelabelDeploymentTargetsRequest === null || updateWhitelabelDeploymentTargetsRequest === undefined) {
            throw new Error('Required parameter updateWhitelabelDeploymentTargetsRequest was null or undefined when calling updateDeploymentTargets.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);
        (<any>Object).assign(localVarHeaderParams, this.opts.extraHeaders);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            agentOptions: {keepAlive: false},
            json: true,
            body: ObjectSerializer.serialize(updateWhitelabelDeploymentTargetsRequest, "UpdateWhitelabelDeploymentTargetsRequest")
        };

        let authenticationPromise = Promise.resolve();
=======
>>>>>>> parent of 840c0ea (Release v1.13.10):sdk/studio/api/deploymentApi.ts
        authenticationPromise = authenticationPromise.then(() => this.authentications.ApiKeyAuthentication.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.JWTAuthentication.applyToRequest(localVarRequestOptions));

<<<<<<< HEAD:sdk/studio/sdk/api/whitelabelsApi.ts
        authenticationPromise = authenticationPromise.then(() => this.authentications.JWTHttpHeaderAuthentication.applyToRequest(localVarRequestOptions));

=======
>>>>>>> parent of 840c0ea (Release v1.13.10):sdk/studio/api/deploymentApi.ts
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
<<<<<<< HEAD:sdk/studio/sdk/api/whitelabelsApi.ts
            return new Promise<GenericApiResponse>((resolve, reject) => {
=======
            return new Promise<{ response: http.IncomingMessage; body: EvaluateJobResponse;  }>((resolve, reject) => {
>>>>>>> parent of 840c0ea (Release v1.13.10):sdk/studio/api/deploymentApi.ts
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
<<<<<<< HEAD:sdk/studio/sdk/api/whitelabelsApi.ts
                        body = ObjectSerializer.deserialize(body, "GenericApiResponse");

                        const errString = `Failed to call "${localVarPath}", returned ${response.statusCode}: ` + response.body;

                        if (typeof body.success === 'boolean' && !body.success) {
                            reject(new Error(body.error || errString));
                        }
                        else if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve(body);
                        }
                        else {
                            reject(errString);
=======
                        body = ObjectSerializer.deserialize(body, "EvaluateJobResponse");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
>>>>>>> parent of 840c0ea (Release v1.13.10):sdk/studio/api/deploymentApi.ts
                        }
                    }
                });
            });
        });
    }
}
